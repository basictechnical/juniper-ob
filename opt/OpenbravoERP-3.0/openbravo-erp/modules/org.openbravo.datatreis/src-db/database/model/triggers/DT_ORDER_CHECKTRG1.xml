<?xml version="1.0"?>
  <database name="TRIGGER DT_ORDER_CHECKTRG1">
    <trigger name="DT_ORDER_CHECKTRG1" table="C_ORDER" fires="before" insert="false" update="true" delete="false" foreach="row">
      <body><![CDATA[ 
v_diffqty NUMBER;
 v_projectid character varying(32);
V_message character varying(200);
CurSetInstance RECORD;
 
v_sumQtyOrderline NUMBER;
v_sumQtyReqOrderLine NUMBER;
BEGIN

   
IF UPDATING  THEN
 
IF (:new.processed='Y' AND :new.issotrx='N' AND coalesce(:old.processed,'0')<>coalesce(:new.processed,'0')) THEN

For CurSetInstance IN (select m_requisitionorder.m_requisitionline_id,c_orderline.ad_client_id,c_orderline.ad_org_id,c_orderline.qtyordered,
c_orderline.c_orderline_id,m_requisitionline.qty,m_requisitionorder.m_requisitionline_id
from c_orderline join c_order on c_order.c_order_id=c_orderline.c_order_id join m_requisitionorder 
on m_requisitionorder.c_orderline_id=c_orderline.c_orderline_id 
join m_requisitionline on m_requisitionline.m_requisitionline_id=m_requisitionorder.m_requisitionline_id where c_order.c_order_id=:new.c_order_id)
Loop

select coalesce(sum(m_requisitionorder.qty),0) into v_sumQtyOrderline 
from m_requisitionorder where m_requisitionorder.c_orderline_id=CurSetInstance.c_orderline_id;

select coalesce(sum(m_requisitionorder.qty),0) into v_sumQtyReqOrderLine
 from m_requisitionorder where m_requisitionorder.m_requisitionline_id=CurSetInstance.m_requisitionline_id;


v_diffqty=CurSetInstance.qtyordered-v_sumQtyOrderline ;
 
V_message:='ordered '||v_diffqty ||' v_sumQtyReqOrderLine'||v_sumQtyReqOrderLine||' CurSetInstance.qty '|| CurSetInstance.qty ;
--RAISE_APPLICATION_ERROR(-20000,V_message);

if(v_diffqty + v_sumQtyReqOrderLine < CurSetInstance.qty and v_diffqty<>0) THEN
INSERT INTO m_requisitionorder(m_requisitionorder_id, ad_client_id, ad_org_id, created, 
createdby,updated, updatedby, isactive, m_requisitionline_id, c_orderline_id, qty)
VALUES (get_UUID(),CurSetInstance.ad_client_id, CurSetInstance.ad_org_id,now(),'100',now(),'100', 
'Y', CurSetInstance.m_requisitionline_id, CurSetInstance.c_orderline_id,v_diffqty);
                            
ELSIF(v_diffqty + v_sumQtyReqOrderLine > CurSetInstance.qty) THEN
                    V_message:='ordered quantity is greater than requested quantity '|| CurSetInstance.qty;
                    -- RAISE_APPLICATION_ERROR(-20000, V_message);
END IF;

 
END LOOP;      
       
ELSE

select m_requisition.em_dt_project_id into v_projectid from m_requisition 
                    join m_requisitionline on m_requisitionline.m_requisition_id=m_requisition.m_requisition_id     
                    join m_requisitionorder on m_requisitionorder.m_requisitionline_id=m_requisitionline.m_requisitionline_id  
                    join c_orderline on m_requisitionorder.c_orderline_id=c_orderline.c_orderline_id
                    where c_orderline.c_order_id=:new.c_order_id;

                    --raise exception '%',v_projectid;

IF(:NEW.c_project_id IS NULL) THEN
:NEW.c_project_id:=v_projectid;
END IF;

       END IF;  
END IF;
END DT_ORDER_CHECKTRG1
]]></body>
    </trigger>
  </database>
